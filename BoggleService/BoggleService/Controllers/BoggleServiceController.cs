using Boggle;
using BoggleService.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Threading;
using System.Web.Http;


/// <summary>
/// TODO: ALL SQLDATAREADERS NEED TO CALL READ BEFORE ACCESSING ANY DATA FROM THE TABLE. ENSURE THAT ALL DATA READERS ARE DOING THIS.
/// </summary>
namespace BoggleService.Controllers
{
    /// <summary>
    /// 
    /// 
    /// </summary>
    public class BoggleServiceController : ApiController
    {
        /// <summary>
        /// Holds a collection unique Users, mapped according to their unique UserToken.
        /// </summary>
        private static Dictionary<string, User> Users = new Dictionary<string, User>();
        /// <summary>
        /// Holds a collection of each game, mapped according to their game ID's.
        /// </summary>
        private static Dictionary<string, Game> Games = new Dictionary<string, Game>();
        /// <summary>
        /// The pending game that's waiting to be started.
        /// </summary>
        private static Game PendingGame = new Game();
        /// <summary>
        /// Games are tracked by using a unique game ID, which is generated by appending this number
        /// on to the letter G. So, game ID's will look like this: "G11". This instance variable is
        /// set to increment whenever a new game is actually started.
        /// </summary>
        private static int CurrentGameNum = 0;
        /// <summary>
        /// Provides an object that will be used for locking down the methods.
        /// </summary>
        private static readonly object sync = new object();
        /// <summary>
        /// This HashSet holds a list of all of the words that are allowed in a Boggle game. It is
        /// filled in the static constructor.
        /// </summary>
        private static HashSet<string> dictionary = new HashSet<string>();

        private static string DBConnection;
        /// <summary>
        /// Fills up the dictionary with all of the valid words that can be played in a Boggle game.
        /// </summary>
        static BoggleServiceController()
        {
            DBConnection = ConfigurationManager.ConnectionStrings["BoggleService"].ConnectionString;
            string[] text = File.ReadAllLines(AppDomain.CurrentDomain.BaseDirectory + "/dictionary.txt");
            foreach (string word in text)
            {
                dictionary.Add(word);
            }
        }


        /// <summary>
        /// Create a new user.
        ///
        /// If Nickname is null, or when trimmed is empty or longer than 50 characters, responds with
        /// status 403 (Forbidden). Otherwise, creates a new user with a unique user token and the
        /// trimmed Nickname.The returned user token should be used to identify the user in
        /// subsequent requests. Responds with status 200 (Ok).
        /// </summary>
        /// <param name="nickname">The name of the user to be registered</param>
        [Route("BoggleService/users")]
        public string PostMakeUser([FromBody]string nickname)
        {
            // Usernames can't be null, have no length, or be too long.
            if (nickname == null || nickname.Trim().Length == 0 || nickname.Trim().Length > 50)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }
            // Built in functionality for testing purposes.
            else if (nickname.Trim()[0] == '@')
            {
                Thread.Sleep(10_000);
            }
            else if (nickname.Trim()[0] == '#')
            {
                throw new HttpResponseException(HttpStatusCode.InternalServerError);
            }

            using (SqlConnection conn = new SqlConnection(DBConnection))
            {
                conn.Open();
                using (SqlTransaction trans = conn.BeginTransaction())
                {
                    using (SqlCommand command =
                        new SqlCommand("INSERT INTO Users (UserID, Nickname) values(@UserID, @Nickname)",
                        conn,
                        trans))
                    {
                        string userID = Guid.NewGuid().ToString();

                        command.Parameters.AddWithValue("@UserID", userID);
                        command.Parameters.AddWithValue("@Nickname", nickname.Trim());

                        if (command.ExecuteNonQuery() != 1)
                        {
                            throw new DatabaseException("Query failed unexpectedly.");
                        }

                        trans.Commit();
                        return userID;
                    }
                }
            }
        }

        /// <summary>
        /// Join a game.
        ///
        /// If UserToken is invalid, TimeLimit is less than 5, or TimeLimit is greater than 120,
        /// responds with status 403 (Forbidden). Otherwise, if UserToken is already a player in the
        /// pending game, responds with status 409 (Conflict). Otherwise, if there are no players in
        /// the pending game, adds UserToken as the first player of the pending game, and the
        /// TimeLimit as the pending game's requested time limit. Returns an object as illustrated
        /// below containing the pending game's game ID.Responds with status 200 (Ok) Otherwise, adds
        /// UserToken as the second player.The pending game becomes active and a new pending game
        /// with no players is created.The active game's time limit is the integer average of the
        /// time limits requested by the two players. Returns an object as illustrated below
        /// containing the new active game's game ID(which should be the same as the old pending
        /// game's game ID). Responds with status 200 (Ok).
        /// </summary>
        /// <param name="join">A request containing the user token and their desired time limit</param>
        [Route("BoggleService/games")]
        public JoinGameResponse PostJoinGame([FromBody]JoinGameRequest join)
        {
            // Time limits can't be too long or too short.
            if (join.TimeLimit < 5 || join.TimeLimit > 120)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }

            JoinGameResponse response;
            using (SqlConnection conn = new SqlConnection(DBConnection))
            {
                conn.Open();
                using (SqlTransaction trans = conn.BeginTransaction())
                {
                    using (SqlCommand cmd =
                        new SqlCommand("SELECT UserID FROM Users WHERE UserID=@UserID",
                        conn,
                        trans))
                    {
                        cmd.Parameters.AddWithValue("@UserID", join.UserToken);
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (!reader.HasRows)
                            {
                                throw new HttpResponseException(HttpStatusCode.Forbidden);
                            }
                        }
                    }
                    using (SqlCommand cmd =
                        new SqlCommand("SELECT GameID FROM Games WHERE Player1=@UserID",
                        conn,
                        trans))
                    {
                        cmd.Parameters.AddWithValue("@UserID", join.UserToken);
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (!reader.HasRows)
                            {
                                throw new HttpResponseException(HttpStatusCode.Conflict);
                            }
                        }
                    }
                    using (SqlCommand cmd =
                        new SqlCommand("SELECT GameID, TimeLimit FROM Games WHERE Player2 IS NULL",
                        conn,
                        trans))
                    {
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (!reader.HasRows)
                            {
                                using (SqlCommand startPending =
                                    new SqlCommand("INSERT INTO Games (Player1, TimeLimit, GameStatus) VALUES (@Player1, @TimeLimit, @GameStatus)",
                                    conn,
                                    trans))
                                {
                                    startPending.Parameters.AddWithValue("@Player1", join.UserToken);
                                    startPending.Parameters.AddWithValue("@TimeLimit", join.TimeLimit);
                                    startPending.Parameters.AddWithValue("@GameStatus", "pending");
                                    if (startPending.ExecuteNonQuery() != 1)
                                    {
                                        throw new DatabaseException("Start pending game has failed unexpectedly");
                                    }

                                }
                                using (SqlCommand getPending = new SqlCommand("SELECT GameID from Games WHERE Player2 IS NULL", conn, trans))
                                {
                                    using (SqlDataReader readPending = cmd.ExecuteReader())
                                    {
                                        if (!readPending.HasRows)
                                        {
                                            throw new DatabaseException("What on earth just happened. this shouldn't EVER happen. line 205 just for reference, you twig.");
                                        }
                                        else
                                        {
                                            response = new JoinGameResponse
                                            {
                                                GameID = readPending.GetString(0),
                                                IsPending = true
                                            };
                                        }
                                    }
                                }
                            }
                            else
                            {
                                string GameID = reader.GetString(0);
                                int TimeLimit = reader.GetInt32(1);
                                using (SqlCommand startGame =
                                    new SqlCommand("UPDATE Games SET Player2 = @Player2, TimeLimit = @TimeLimit, Board = @Board, StartTime = @StartTime, GameStatus = @GameStatus WHERE GameID = @GameID",
                                    conn,
                                    trans))
                                {
                                    TimeLimit = (TimeLimit + join.TimeLimit) / 2;
                                    startGame.Parameters.AddWithValue("@Player2", join.UserToken);
                                    startGame.Parameters.AddWithValue("@TimeLimit", TimeLimit);
                                    startGame.Parameters.AddWithValue("@Board", new BoggleBoard().ToString());
                                    startGame.Parameters.AddWithValue("@StartTime", DateTime.Now);
                                    startGame.Parameters.AddWithValue("@GameStatus", "active");
                                    if (startGame.ExecuteNonQuery() != 1)
                                    {
                                        throw new DatabaseException("Failed to start game!");
                                    }
                                    response = new JoinGameResponse
                                    {
                                        GameID = GameID,
                                        IsPending = false
                                    };
                                }
                            }
                        }
                    }
                    trans.Commit();
                }
            }
            return response;
        }

        /// <summary>
        /// Cancel a pending request to join a game.
        ///
        /// If UserToken is invalid or is not a player in the pending game, responds with status 403
        /// (Forbidden). Otherwise, removes UserToken from the pending game and responds with status
        /// 204 (NoContent).
        /// </summary>
        /// <param name="UserToken">
        /// The unique identifying token for the player to be removed from the pending game
        /// </param>
        [Route("BoggleService/games")]
        public void PutCancelJoin([FromBody]string UserToken)
        {
            using (SqlConnection conn = new SqlConnection(DBConnection))
            {
                conn.Open();
                using (SqlTransaction trans = conn.BeginTransaction())
                {
                    using (SqlCommand checkValidUser = new SqlCommand("SELECT UserID from Users where UserID = @UserToken", conn, trans))
                    {
                        checkValidUser.Parameters.AddWithValue("@UserToken", UserToken);
                        using (SqlDataReader readResult = checkValidUser.ExecuteReader())
                        {
                            if (!readResult.HasRows)
                            {
                                throw new HttpResponseException(HttpStatusCode.Forbidden);
                            }
                        }
                    }
                    using (SqlCommand checkPendingUser = new SqlCommand("SELECT GameID from Games WHERE Player2 IS NULL AND Player1 = @Player1", conn, trans))
                    {
                        checkPendingUser.Parameters.AddWithValue("@Player1", UserToken);
                        using (SqlDataReader readResult = checkPendingUser.ExecuteReader())
                        {
                            if (!readResult.HasRows)
                            {
                                throw new HttpResponseException(HttpStatusCode.Forbidden);
                            }
                        }
                    }
                    using (SqlCommand cmd = new SqlCommand("DELETE FROM Games WHERE Player1 = @UserID", conn, trans))
                    {
                        cmd.Parameters.AddWithValue("@UserID", UserToken);
                        if (cmd.ExecuteNonQuery() != 1)
                        {
                            throw new DatabaseException("You should never hit this you twig. but if you do, its line 295.");
                        }
                    }
                    trans.Commit();
                }
            }
        }

        /// <summary>
        /// Play a word in a game. If Word is null or empty or longer than 30 characters when
        /// trimmed, or if gameID or UserToken is invalid, or if UserToken is not a player in the
        /// game identified by gameID, responds with response code 403 (Forbidden). Otherwise, if the
        /// game state is anything other than "active", responds with response code 409 (Conflict)
        /// Otherwise, records the trimmed Word as being played by UserToken in the game identified
        /// by gameID.Returns the score for Word in the context of the game(e.g. if Word has been
        /// played before the score is zero). Responds with status 200 (OK). Note: The word is not
        /// case sensitive.
        /// </summary>
        /// <param name="gameID">The ID of the game that the word should be added to</param>
        /// <param name="request">
        /// Contains the UserToken of the user playing the word and the word itself
        /// </param>
        [Route("BoggleService/games/{gameID}")]
        public int PutPlayWord([FromUri] string gameID, PutWordRequest request)
        {
            // Check for all of the possible errors that could occur according to the API
            string UserToken = request.UserToken;
            string Word = request.Word.ToUpper();
            BoggleBoard currentBoard;
            bool isAPlayer = false;
            bool arePlayerOne = false;
            // Can't have a null word.
            if (Word == null)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }
            // Can't have no word or a word that's too long.
            else if (Word.Trim().Length == 0 || Word.Trim().Length > 30)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }

            using (SqlConnection conn = new SqlConnection(DBConnection))
            {
                conn.Open();
                using (SqlTransaction trans = conn.BeginTransaction())
                {
                    //Checks if the User is even registered in Users
                    using (SqlCommand checkValidRegistration = new SqlCommand("SELECT Nickname from Users where UserID = @UserID", conn, trans))
                    {
                        checkValidRegistration.Parameters.AddWithValue("@UserID", UserToken);
                        using (SqlDataReader readResult = checkValidRegistration.ExecuteReader())
                        {
                            if (!readResult.HasRows)
                            {
                                throw new HttpResponseException(HttpStatusCode.Forbidden);
                            }
                        }
                    }

                    //Checks if the UserID is Player1 in a game that matches the GameID
                    using (SqlCommand checkValidGameUserPlayer1 = new SqlCommand("SELECT GameID from Games where Player1 = @UserID", conn, trans))
                    {
                        checkValidGameUserPlayer1.Parameters.AddWithValue("@UserID", UserToken);
                        using (SqlDataReader readResult = checkValidGameUserPlayer1.ExecuteReader())
                        {
                            if (!readResult.HasRows)
                            {
                            }
                            else if (readResult.GetString(0).Equals(gameID))
                            {
                                isAPlayer = true;
                                arePlayerOne = true;
                            }
                            else
                            {
                                throw new DatabaseException("Line 373.. User is player 1 but the gameID doesnt match.. twig alert? ");    //I dont think it should hit this.
                            }
                        }
                    }

                    //Checks if the UserID is Player2 in a game that matches the GameID
                    using (SqlCommand checkValidGameUserPlayer2 = new SqlCommand("SELECT GameID from Games where Player2 = @UserID", conn, trans))
                    {
                        checkValidGameUserPlayer2.Parameters.AddWithValue("@UserID", UserToken);
                        using (SqlDataReader readResult = checkValidGameUserPlayer2.ExecuteReader())
                        {
                            if (!readResult.HasRows)
                            {
                            }
                            else if (readResult.GetString(0).Equals(gameID))
                            {
                                isAPlayer = true;
                                arePlayerOne = false;
                            }
                            else
                            {
                                throw new DatabaseException("Line 394.. User is player 2 but the gameID doesnt match.. twig alert? ");    //I dont think it should hit this.
                            }
                        }
                    }

                    if (!isAPlayer)
                    {
                        throw new HttpResponseException(HttpStatusCode.Forbidden);      //Not sure if this is neccessary. @Ryan can you double check. Theres gotta be a better way to do this
                    }


                    if (arePlayerOne)
                    {
                        //Gets the game status and checks if the user is in an active game
                        using (SqlCommand checkValidActiveGameUser = new SqlCommand("SELECT GameStatus from Games where Player1 = @Player1", conn, trans))
                        {
                            checkValidActiveGameUser.Parameters.AddWithValue("@Player1", UserToken);
                            using (SqlDataReader readResult = checkValidActiveGameUser.ExecuteReader())
                            {
                                // TODO: Remove extra if statement after testing.
                                if (!readResult.HasRows)
                                {
                                    throw new DatabaseException("It should never hit this since the last SQLCommand checked if the User was in a game. You messed up you twig.");
                                }
                                else if (!readResult.GetString(0).Equals("active"))
                                {
                                    throw new HttpResponseException(HttpStatusCode.Conflict);
                                }
                            }
                        }
                    }
                    else
                    {
                        //Gets the game status and checks if the user is in an active game
                        using (SqlCommand checkValidActiveGameUser = new SqlCommand("SELECT GameStatus from Games where Player2 = @Player2", conn, trans))
                        {
                            checkValidActiveGameUser.Parameters.AddWithValue("@Player2", UserToken);
                            using (SqlDataReader readResult = checkValidActiveGameUser.ExecuteReader())
                            {
                                if (!readResult.HasRows)
                                {
                                    throw new DatabaseException("It should never hit this since the last SQLCommand checked if the User was in a game. You messed up you twig.");
                                }
                                else if (!readResult.GetString(0).Equals("active"))
                                {
                                    throw new HttpResponseException(HttpStatusCode.Conflict);
                                }
                            }
                        }
                    }

                    //Gets the game's board
                    using (SqlCommand getGameBoard = new SqlCommand("SELECT Board from Games where GameID = @GameID", conn, trans))
                    {
                        getGameBoard.Parameters.AddWithValue("@GameID", gameID);
                        using (SqlDataReader readResult = getGameBoard.ExecuteReader())
                        {
                            if (!readResult.HasRows)
                            {
                                throw new DatabaseException("It should never hit this since the last SQLCommand checked if the User was in a game. You messed up you twig.");
                            }
                            else
                            {
                                currentBoard = new BoggleBoard(readResult.GetString(0));
                            }
                        }
                    }

                    WordAndScore wordBeingPlayed = new WordAndScore()
                    {
                        Word = Word
                    };

                    // If the word isn't in the dictionary, or can't be played on the board, it's score
                    // should be negative one.
                    // TODO: POSSIBLE SCORING BUG. KEEP AN EYE ON IT
                    if (Word.Length > 2 && (!dictionary.Contains(Word)) || !currentBoard.CanBeFormed(Word))
                    {
                        wordBeingPlayed.Score = -1;
                    }
                    else
                    {
                        // Otherwise, assign a point value to the word based on its length.
                        switch (Word.Length)
                        {
                            case 1:
                            case 2:
                                wordBeingPlayed.Score = 0;
                                break;
                            case 3:
                            case 4:
                                wordBeingPlayed.Score = 1;
                                break;
                            case 5:
                                wordBeingPlayed.Score = 2;
                                break;
                            case 6:
                                wordBeingPlayed.Score = 3;
                                break;
                            case 7:
                                wordBeingPlayed.Score = 5;
                                break;
                            default:
                                wordBeingPlayed.Score = 11;
                                break;
                        }
                    }


                    using (SqlCommand playWord =
                                new SqlCommand("INSERT INTO Words (Word, GameID, Player, Score) VALUES (@Word, @GameID, @Player, @Score)",
                                conn,
                                trans))
                    {
                        playWord.Parameters.AddWithValue("@Word", wordBeingPlayed.Word);
                        playWord.Parameters.AddWithValue("@GameID", gameID);
                        playWord.Parameters.AddWithValue("@Player", UserToken);
                        playWord.Parameters.AddWithValue("@Score", wordBeingPlayed.Score);
                    }
                    trans.Commit();
                    return wordBeingPlayed.Score;
                }
            }
        }

        /// <summary>
        /// Get game status information. If gameID is invalid, responds with status 403 (Forbidden).
        /// Otherwise, returns information about the game named by gameID as illustrated below.Note
        /// that the information returned depends on whether brief is true or false as well as on the
        /// state of the game. Responds with status code 200 (OK). Note: The Board and Words are not
        /// case sensitive.
        /// </summary>
        /// <param name="gameID">The ID of the game whose status will be checked</param>
        /// <param name="brief">Determines whether or not they want the brief response</param>
        /// <returns></returns>
        [Route("BoggleService/games/{gameID}/{brief}")]
        public Game GetGameStatus(string gameID, bool brief)
        {
            string gameStatus = "";
            Game response = new Game()
            {
                Player1 = new User(),
                Player2 = new User()
            };

            string playerOne = "";
            string playerTwo = "";

            using (SqlConnection conn = new SqlConnection(DBConnection))
            {
                conn.Open();
                using (SqlTransaction trans = conn.BeginTransaction())
                {

                    // Determine if they are asking for a valid GameID.
                    using (SqlCommand checkValidGameID =
                        new SqlCommand("SELECT * FROM Games WHERE GameID = @GameID", conn, trans))
                    {
                        checkValidGameID.Parameters.AddWithValue("@GameID", gameID);
                        using (SqlDataReader reader = checkValidGameID.ExecuteReader())
                        {
                            if (!reader.HasRows)
                            {
                                throw new HttpResponseException(HttpStatusCode.Forbidden);
                            }
                            else
                            {
                                gameStatus = reader.GetString(0);
                            }
                        }
                    }

                    // Determine if the game they are asking for is just a pending game.
                    using (SqlCommand checkPending =
                        new SqlCommand("SELECT Player2 FROM Games WHERE GameID = @GameID",
                        conn,
                        trans))
                    {
                        checkPending.Parameters.AddWithValue("@GameID", gameID);
                        using (SqlDataReader readPending = checkPending.ExecuteReader())
                        {
                            // Pending games don't have a second player.
                            if (!readPending.HasRows)
                            {
                                response.GameState = "pending";
                                trans.Commit();
                                return response;
                            }
                        }
                    }

                    // Compute the status of the game based off of time left.
                    int timeLeft;
                    using (SqlCommand getGameStatus =
                        new SqlCommand("SELECT StartTime, TimeLimit FROM Games WHERE GameID = @GameID",
                        conn,
                        trans))
                    {
                        getGameStatus.Parameters.AddWithValue("@GameID", gameID);
                        using (SqlDataReader readTiming = getGameStatus.ExecuteReader())
                        {
                            DateTime timeStarted = readTiming.GetDateTime(0);
                            int timeLimit = readTiming.GetInt32(1);
                            timeLeft = computeTimeLeft(timeStarted, timeLimit);
                        }
                    }

                    // Set the game status according to how much time is left.
                    gameStatus = timeLeft > 0 ? "active" : "completed";



                    if (gameStatus.Equals("active") && brief)
                    {

                        response.GameState = "active";
                        // Obtain the information needed for a response for a brief response
                        // and an active game.
                        using (SqlCommand briefActiveResponse =
                            new SqlCommand("SELECT StartTime, TimeLimit, Player1, Player2 FROM Games WHERE GameID = @GameID",
                            conn,
                            trans))
                        {
                            briefActiveResponse.Parameters.AddWithValue("@GameID", gameID);
                            using (SqlDataReader reader = briefActiveResponse.ExecuteReader())
                            {
                                response.TimeLeft = computeTimeLeft(reader.GetDateTime(0), reader.GetInt32(1));
                                playerOne = reader.GetString(2);
                                playerTwo = reader.GetString(3);
                            }
                        }

                        calculatePlayersScore(response, gameID, playerOne, playerTwo, conn, trans);
                    }
                    // Obtain the info necessary to construct a brief response for a completed game.
                    else if (gameStatus.Equals("completed") && brief)
                    {
                        // Set the game state to completed.
                        response.GameState = "completed";

                        // Obtain the necessary information to complete a brief response for a
                        // completed game.
                        using (SqlCommand completedBriefResponse =
                            new SqlCommand("SELECT Player1, Player2 WHERE GameID = @GameID",
                            conn,
                            trans))
                        {
                            completedBriefResponse.Parameters.AddWithValue("@GameID", gameID);
                            using (SqlDataReader readCompletedBrief = completedBriefResponse.ExecuteReader())
                            {
                                playerOne = readCompletedBrief.GetString(0);
                                playerTwo = readCompletedBrief.GetString(1);
                            }
                        }
                        calculatePlayersScore(response, gameID, playerOne, playerTwo, conn, trans);
                    }
                    else if (gameStatus.Equals("active"))
                    {
                        // Set the game state to active.
                        response.GameState = "active";

                        // Obtain the info needed for a non-brief game response for an active game.
                        using (SqlCommand activeGameInfo =
                            new SqlCommand("SELECT Board, TimeLimit, StartTime, Player1, Player2 FROM Games WHERE GameID = @GameID",
                            conn,
                            trans))
                        {
                            activeGameInfo.Parameters.AddWithValue("@GameID", gameID);
                            using (SqlDataReader readGameInfo = activeGameInfo.ExecuteReader())
                            {
                                response.Board = readGameInfo.GetString(0);
                                response.TimeLimit = readGameInfo.GetInt32(1);
                                response.TimeLeft = computeTimeLeft(readGameInfo.GetDateTime(2), response.TimeLimit);

                                // Save the tokens for player one and two so we can access them later.
                                playerOne = readGameInfo.GetString(3);
                                playerTwo = readGameInfo.GetString(4);
                            }
                        }



                        ObtainUsername(response, playerOne, playerTwo, conn, trans);
                        calculatePlayersScore(response, gameID, playerOne, playerTwo, conn, trans);

                    }
                    else
                    {
                        response.GameState = "completed";
                        using (SqlCommand completedGameInfo =
                            new SqlCommand("SELECT Board, TimeLimit, Player1, Player2 FROM Games WHERE GameID = @GameID",
                            conn,
                            trans))
                        {
                            completedGameInfo.Parameters.AddWithValue("@GameID", gameID);
                            using (SqlDataReader readCompletedGame = completedGameInfo.ExecuteReader())
                            {
                                response.Board = readCompletedGame.GetString(0);
                                response.TimeLimit = readCompletedGame.GetInt32(1);

                            }

                        }
                        ObtainUsername(response, playerOne, playerTwo, conn, trans);
                        calculatePlayersScore(response, gameID, playerOne, playerTwo, conn, trans);
                        response.Player1.WordsPlayed = new List<WordAndScore>();
                        response.Player2.WordsPlayed = new List<WordAndScore>();

                        using (SqlCommand getPlayer1Words = new SqlCommand("SELECT Word, Score FROM Words WHERE Player = @Player1 AND GameID = @GameID", conn, trans))
                        {
                            getPlayer1Words.Parameters.AddWithValue("@Player1", playerOne);
                            getPlayer1Words.Parameters.AddWithValue("GameID", gameID);
                            using (SqlDataReader readPlayer1Words = getPlayer1Words.ExecuteReader())
                            {
                                while (readPlayer1Words.Read())
                                {
                                    WordAndScore word = new WordAndScore
                                    {
                                        Word = readPlayer1Words.GetString(0),
                                        Score = readPlayer1Words.GetInt32(1)
                                    };
                                    response.Player1.WordsPlayed.Add(word);
                                }
                            }
                        }








                    }
                }
            }



















            //Game currentGame;
            //Game response;
            //lock (sync)
            //{
            //    // If the game is pending, they will always get the same response.
            //    // If the game is active and they want a brief response, do the following.
            //    if (PendingGame.GameID != null && PendingGame.GameID.Equals(gameID))
            //    {
            //        response = new Game()
            //        {
            //            GameState = "pending"
            //        };
            //        return response;
            //    }
            //    // If the game isn't pending and isn't on our list, return a Forbidden code.
            //    else if (!Games.TryGetValue(gameID, out currentGame))
            //   
            //        throw new HttpResponseException(HttpStatusCode.Forbidden);
            //    }
            //    // Determine the game state based on the amount of time left
            //    if (ComputeTimeLeft(currentGame) <= 0)
            //    {
            //        currentGame.GameState = "completed";
            //        currentGame.TimeLeft = 0;
            //    }
            //    // Now determine what our appropriate response should be.
            //    if (currentGame.GameState.Equals("active") && brief)
            //    {
            //        // Copy over the state of the game.
            //        response = new Game()
            //        {
            //            GameState = "active",
            //            TimeLeft = ComputeTimeLeft(currentGame),
            //            Player1 = DeepCopyUser(currentGame.Player1),
            //            Player2 = DeepCopyUser(currentGame.Player2)
            //        };


            //        // Set all of the player info except for their score to null, so that it doesn't get serialized
            //        response.Player1.Nickname = null;
            //        response.Player1.WordsPlayed = null;

            //        response.Player2.Nickname = null;
            //        response.Player2.WordsPlayed = null;
            //    }
            //    // If the game is completed and they want a brief status, do the following.
            //    else if (currentGame.GameState.Equals("completed") && brief)
            //    {
            //        // Copy over the state of the game.
            //        response = new Game
            //        {
            //            GameState = "completed",
            //            Player1 = DeepCopyUser(currentGame.Player1),
            //            Player2 = DeepCopyUser(currentGame.Player2)

            //        };

            //        // Change all of the data in the response so when serialized it matches the brief response for a completed game.
            //        response.Player1.Nickname = null;
            //        response.Player1.WordsPlayed = null;

            //        response.Player2.Nickname = null;
            //        response.Player2.WordsPlayed = null;
            //    }
            //    // If the game is active and they want a complete response, do the following.
            //    else if (currentGame.GameState.Equals("active"))
            //    {
            //        // Copy over the state of the current game, and deep copy the users.
            //        response = new Game()
            //        {
            //            GameState = "active",
            //            Board = currentGame.Board,
            //            TimeLimit = currentGame.TimeLimit,
            //            TimeLeft = ComputeTimeLeft(currentGame),
            //            Player1 = DeepCopyUser(currentGame.Player1),
            //            Player2 = DeepCopyUser(currentGame.Player2)
            //        };

            //        // For an active game, you don't want to serialize the words that the player
            //        // played, so set them to null.
            //        response.Player1.WordsPlayed = null;
            //        response.Player2.WordsPlayed = null;

            //    }
            //    else
            //    {
            //        // Copy over the state of the game, and deep copy over the players.
            //        response = new Game()
            //        {
            //            GameState = "completed",
            //            Board = currentGame.Board,
            //            TimeLimit = currentGame.TimeLimit,
            //            TimeLeft = ComputeTimeLeft(currentGame),
            //            Player1 = DeepCopyUser(currentGame.Player1),
            //            Player2 = DeepCopyUser(currentGame.Player2)
            //        };
            //    }
            //    return response;
            //}

            return response;
        }

        private int computeTimeLeft(DateTime timeStarted, int timelimit)
        {
            return (int)timeStarted.AddSeconds(timelimit).Subtract(DateTime.Now).TotalSeconds;
        }

        private void calculatePlayersScore(Game response, string gameID, string playerOne, string playerTwo, SqlConnection conn, SqlTransaction trans)
        {
            // Calculates the score of the first player.
            using (SqlCommand findPlayerOneScore =
                       new SqlCommand("SELECT Score FROM Words WHERE GameID = @GameID AND Player = @PlayerOne",
                       conn,
                       trans))
            {
                findPlayerOneScore.Parameters.AddWithValue("@GameID", gameID);
                findPlayerOneScore.Parameters.AddWithValue("@PlayerOne", playerOne);
                using (SqlDataReader readScore = findPlayerOneScore.ExecuteReader())
                {
                    while (readScore.Read())
                    {
                        response.Player1.Score += readScore.GetInt32(0);
                    }
                }
            }

            // Calculates the score of the second player.
            using (SqlCommand findPlayerTwoScore =
                            new SqlCommand("SELECT Score FROM Words WHERE GameID = @GameID AND Player = @PlayerTwo",
                            conn,
                            trans))
            {
                findPlayerTwoScore.Parameters.AddWithValue("@GameID", gameID);
                findPlayerTwoScore.Parameters.AddWithValue("@PlayerTwo", playerTwo);
                using (SqlDataReader readScore = findPlayerTwoScore.ExecuteReader())
                {
                    while (readScore.Read())
                    {
                        response.Player2.Score += readScore.GetInt32(0);
                    }
                }
            }
        }
        private void ObtainUsername(Game response, string Player1ID, string Player2ID, SqlConnection conn, SqlTransaction trans)
        {
            using (SqlCommand ObtainPlayerOneToken = new SqlCommand("SELECT Nickname from Users where UserID = @UserID", conn, trans))
            {
                ObtainPlayerOneToken.Parameters.AddWithValue("@UserID", Player1ID);
                using (SqlDataReader readNickname = ObtainPlayerOneToken.ExecuteReader())
                {
                    response.Player1.Nickname = readNickname.GetString(0);
                }
            }

            using (SqlCommand ObtainPlayerOneToken = new SqlCommand("SELECT Nickname from Users where UserID = @UserID", conn, trans))
            {
                ObtainPlayerOneToken.Parameters.AddWithValue("@UserID", Player2ID);
                using (SqlDataReader readNickname = ObtainPlayerOneToken.ExecuteReader())
                {
                    response.Player2.Nickname = readNickname.GetString(0);
                }
            }
        }
    }









}